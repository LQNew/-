/* 一个工厂制造的产品形状都是长方体，它们的高度都是h，长和宽都相等，一共有六个型号，他们的长宽分别为1*1, 2*2, 3*3, 4*4, 5*5, 6*6。
   这些产品通常使用一个 6*6*h 的长方体包裹包装然后邮寄给客户。因为邮费很贵，所以工厂要想方设法的减小每个订单运送时的包裹数量。
   输入：
   输入文件包括几行，每一行代表一个订单。每个订单里的一行包括六个整数，中间用空格隔开，分别为1*1至6*6这六种产品的数量。输入文件将以6个0组成的一行结尾。
   输出：
   除了输入的最后一行6个0以外，输入文件里每一行对应着输出文件的一行，每一行输出一个整数代表对应的订单所需的最小包裹数。

   贪心算法解决此问题！
   分析：这是一个划分题，就是先要针对不同尺寸的箱子不同的情境下分配好问题：
   6*6 -->一个箱子
   5*5 -->11个1*1箱子空间
   4*4 -->5个2*2箱子空间
   3*3 -->4k+1类型：5个2*2箱子空间+7个1*1箱子空间;
          4k+2类型：3个2*2箱子空间+6个1*1箱子空间;
          4k+3类型：1个2*2箱子空间+5个1*1箱子空间;
          4k类型：刚好装满

*/
#include<iostream>
using namespace std;
int computer_nums(int a,int b,int c,int d,int e,int f)
{
    int num=f+e+d+(c+3)/4;
    int U[4]={0,5,3,1};
    int num_2=5*d+U[c%4]; //计算不同数目的3*3箱子余出的2*2箱子空间
    if(b>num_2)
        num+=(b-num_2+8)/9; //一个6*6箱子对应9个2*2空间尺寸
    int num_1=num*36-f*36-e*25-d*16-c*9-b*4;
    if(a>num_1)
        num+=(a-num_1+35)/36; //一个6*6箱子对应36个1*1空间尺寸‘
    return num;
}

int main()
{
    int a,b,c,d,e,f;
    cin>>a>>b>>c>>d>>e>>f;
    while(a!=0||b!=0||c!=0||d!=0||e!=0||f!=0)
    {
        int Num=computer_nums(a,b,c,d,e,f);
        cout<<Num<<endl;
        cin>>a>>b>>c>>d>>e>>f;
    }
    return 0;
}
